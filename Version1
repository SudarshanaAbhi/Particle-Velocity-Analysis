#import modules for extracting video frames 
from __future__ import division, unicode_literals, print_function  # for compatibility with Python 2 and 3
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from pandas import DataFrame, Series  
import time
import os 
import cv2
from pims import ImageSequence
import trackpy as tp
import pims
import av

input_path = r' ' #Enter input path of file
output = r" " #Enter output file path for first analysis section
output_round2 = r" " #Enter output file path for second analysis section
#particle tracking
#frames_arr = ImageSequence(r"C:\Users\Abhi\Documents\biomint_viscosity_project\visc_vid_frames_extract") #numpy array of pixel intensities
#def gray(image):
#    return image[:, :, 1]  # Take just the green channel

#create function to run code
#def find_visc(inp,outp,outp_round2):
#import modules for extracting video frames 
#from __future__ import division, unicode_literals, print_function  # for compatibility with Python 2 and 3
#import matplotlib as mpl
#import matplotlib.pyplot as plt
#import numpy as np
#import pandas as pd
#from pandas import DataFrame, Series  
#import time
#import os 
#import cv2
#from pims import ImageSequence
#import trackpy as tp
#import pims
#import av


frames_arr_pims = pims.open(r"C:\Users\Abhi\Downloads\8Vpp_30 glycerol_20x.mp4")
#frames_arr_pims = pims.open(r'C:\Users\Abhi\Downloads\8Vpp_30 glycerol_20x.mp4')
print(frames_arr_pims)
fps = int(input("Enter the frames per second (fps) of the video: "))
tot_frames = int(input("Enter the total number of frames in the video: "))
print('Total frames in video: {}'.format(tot_frames))
frame_shape = (input("Enter the frame shape (pixel dimensions) separated by a comma (ex. 400, 600): ")).split(',')
frame_shape_fin = [] 
[frame_shape_fin.append(int(dim)) for dim in frame_shape]

start_frame = int(input("Enter a starting frame number: " ))
end_frame = int(input("Enter an end frame number: "))

frames_keep = frames_arr_pims[start_frame:end_frame]
print("{} frames selected".format(len(frames_keep)))

frames_list = [] #creates list of data frames of pixel value np arrays
count = 0
for i in range(0,len(frames_keep)):
   gray = cv2.cvtColor(frames_keep[i],cv2.COLOR_BGR2GRAY)
   frames_list.append(tp.locate(gray, 7, minmass = 150, maxsize=40,invert=True))
   tp.annotate(tp.locate(gray, 7, minmass = 150, maxsize= 40,invert=True), gray)
   #fig = tp.annotate(tp.locate(gray, 7, minmass = 150, maxsize= 40,invert=True), gray)
   #count+=1
   #cv2.imwrite(output + "/%#05d_.jpg" % (count+1),fig)

plt.imshow(frames_keep[0]) #example
grey = cv2.cvtColor(frames_keep[0],cv2.COLOR_BGR2GRAY) #example

#region where particles of interest are
x_lower_reg = int(input("What is the left (lower) bound x-coordinate of the region of interest? Enter a number: "))
x_upper_reg = int(input("What is the right (upper) bound x-coordinate of the region of interest? Enter a number: "))
y_lower_reg = int(input("What is the left (lower) bound y-coordinate of the region of interest? Enter a number: "))
y_upper_reg = int(input("What is the right (upper) bound y-coordinate of the region of interest? Enter a number: "))

#filtering
import matplotlib.pyplot as plt
#frame2_filt = frames_list[1].iloc[5:15,:5].query('{0} <= y <= {1} & {2} <= x <= {3}'.format(y_lower_reg,y_upper_reg,x_lower_reg,x_upper_reg)) #filter for vortices region
#filter for region in all frames and store
frames_list_filt = []
count_2 = 0
for frame in frames_list:  
    frames_list_filt.append(frame.iloc[5:15,:5].query('{0} <= y <= {1} & {2} <= x <= {3}'.format(y_lower_reg,y_upper_reg,x_lower_reg,x_upper_reg)))
    plt.clf()
    plt.scatter(frame.iloc[5:15,:5].query('{} <= y <= {} & {} <= x <= {}'.format(y_lower_reg,y_upper_reg,x_lower_reg,x_upper_reg)).x,
                frame.iloc[5:15,:5].query('{} <= y <= {} & {} <= x <= {}'.format(y_lower_reg,y_upper_reg,x_lower_reg,x_upper_reg)).y);
    ax = plt.gca();
    ax.set_ylim(y_lower_reg+10,y_upper_reg+10) #region of interest
    ax.set_xlim(x_lower_reg+10,x_upper_reg+10) #region of interest
    ax.invert_yaxis()
    count_2+= 1 
    plt.savefig(output + "/%#05d.jpg" % (count_2+1))    
print("{} frames selected".format(len(frames_list_filt)))
frames_list_filt #inspect 

#filter out objects not moving    
#do lin reg to check which attribute of particle best helps for classification between particle and artifact
x_lower_part = int(input("What is the left (lower) bound x-coordinate of the particle(s) of interest? Enter a number: "))
x_upper_part = int(input("What is the right (upper) bound x-coordinate of the particle(s) of interest? Enter a number: "))
y_lower_part = int(input("What is the left (lower) bound y-coordinate of the particle(s) of interest? Enter a number: "))
y_upper_part = int(input("What is the right (upper) bound y-coordinate of the particle(s) of interest? Enter a number: "))

#round 2 of filtering: selecting specific particles to analyze 
frames_filt_round2 = []
count2 = 0
for frame in frames_list_filt:  
    frames_filt_round2.append(frame.iloc[:,:].query('y >= {0} & x <= {1}'.format(y_lower_part,x_upper_part)))
    plt.clf()
    plt.scatter(frame.iloc[:,:].query('y >= {0} & x <= {1}'.format(y_lower_part,x_upper_part)).x,
                frame.iloc[:,:].query('y >= {0} & x <= {1}').format(y_lower_part,x_upper_part).y);
    ax = plt.gca();
    ax.set_ylim(0,frame_shape_fin[0])
    ax.set_xlim(0,frame_shape_fin[1])
    ax.invert_yaxis()
    count2 += 1 
    plt.savefig(output_round2 + "/%#05d.jpg" % (count2+1)) 
print("{} frames selected".format(len(frames_filt_round2)))

#eliminate objects not moving (another filter step)
#first store all x and y values in a single data frame
coordinates_df = pd.DataFrame()
count=0
for obj in frames_filt_round2:
    coordinates_df = pd.concat([coordinates_df,obj.iloc[:,:2]], ignore_index=True)    
    count += 1 
count #should be the number of frames

#differences between particle locations (y,x)
diff_df = coordinates_df.diff()

#remove particles that dont move 
coord_df_no_nan = diff_df[diff_df!=0].dropna()
#[index for index,value in enumerate(coordinates_df.iloc[3:,:]) if int(value) > 0]

#filter for reasonable particles movements between frames
x_avg = abs(coord_df_no_nan['x']).describe()[1]
y_avg = abs(coord_df_no_nan['y']).describe()[1]
x_25perc = abs(coord_df_no_nan['x']).describe()[4]
y_25perc = abs(coord_df_no_nan['y']).describe()[4]

#check for outlier particle tracks (unreliable, should not be used in viscosity determination)
x_stats = abs(coord_df_no_nan['x']).describe()
y_stats = abs(coord_df_no_nan['y']).describe()
if (x_stats[1]-x_stats[3]>x_stats[2]) or (x_stats[7]-x_stats[1]>x_stats[2]) or (y_stats[1]-y_stats[3]>y_stats[2]) or (y_stats[7]-y_stats[1]>y_stats[2]):
    print("Particle displacement outlier value detected: particle displacement should not be used in viscosity determination")

#select particles moving <= 25percentile distance in x and y axis
x_diff_filt = pd.DataFrame(coord_df_no_nan['x'][abs(coord_df_no_nan['x']) <= x_25perc]) 
y_diff_filt = pd.DataFrame(coord_df_no_nan['y'][abs(coord_df_no_nan['y']) <= y_25perc]) 
filt_obj_displac = pd.concat([x_diff_filt,y_diff_filt],ignore_index=False,axis=1).dropna()

#Get original coordinates of filtered particles 
part_idx = list(filt_obj_displac.index)

#Graph the filtered particles to see if their motion is expected
part_coords_motion = pd.DataFrame()
x_coords_motion = []
y_coords_motion = []
coords_motion_df = pd.DataFrame()
for part in part_idx:
    x_coords_motion.append(coordinates_df.iloc[part-1][1])
    y_coords_motion.append(coordinates_df.iloc[part-1][0])    
    x_coords_motion.append(coordinates_df.iloc[part][1])
    y_coords_motion.append(coordinates_df.iloc[part][0])
coords_motion_df = coords_motion_df.append(pd.DataFrame(x_coords_motion))    
coords_motion_df['y'] = pd.DataFrame(y_coords_motion)
coords_motion_df.columns = ['x','y']
#graph
plt.clf()
plt.scatter(coords_motion_df['x'],coords_motion_df['y'])
ax = plt.gca();
ax.set_ylim(min(coords_motion_df['y'])-5,max(coords_motion_df['y'])+5)
ax.set_xlim(min(coords_motion_df['x'])-5,max(coords_motion_df['x'])+5)
ax.invert_yaxis()

#calculate vectors from (x,y) location displacement
#formula for distance: sqrt((y2-y1)^2 + (x2-x1)^2)
import math
part_displacements = []
for part in part_idx:
    part_displacements.append(math.sqrt(((coordinates_df.iloc[part,0])-(coordinates_df.iloc[part-1,0]))**2 + ((coordinates_df.iloc[part,1])-(coordinates_df.iloc[part-1,1]))**2))
part_displ_df = pd.DataFrame(part_displacements)

#calculate speed by fps
#formula = displ/(1/fps)
part_speeds = []
for i in range(len(part_displ_df)):    
    part_speeds.append(float(part_displ_df.iloc[i])/(1/1000.0))
part_speeds_df = pd.DataFrame(part_speeds)
speed_choice = int(input('Which speed do you want to use? (enter number option) options/n:{}:'.format(part_speeds_df)))
speed_fin = float(part_speeds_df.iloc[speed_choice,:])

import scipy.optimize
import matplotlib.pyplot as plt

#sample data
speed = np.array([2850,2470,2360,2080,1830,1420,580,390])
visc = np.array([1.2,1.5,2.0,2.5,3.6,5.1,10.9,22.6])

def monoExp(speed, m, t, b):
    return m * np.exp(-t * (speed)) + b

# perform the fit
p0 = (30, 0.001, 0) # start with values near those we expect
params, cv = scipy.optimize.curve_fit(monoExp, speed, visc, p0)
m, t, b = params

# determine quality of the fit
squaredDiffs = np.square(visc - monoExp(speed, m, t, b))
squaredDiffsFromMean = np.square(visc - np.mean(visc))
rSquared = 1 - np.sum(squaredDiffs) / np.sum(squaredDiffsFromMean)
print(f"RÂ² = {rSquared}")

# inspect the parameters
print(f"Y = {m} * e^(-{t} * x) + {b}")
#equation
Y = m * np.exp(-t * (speed)) + b
#plot
plt.plot(speed,Y,'r')
#predict viscosity
inputspeed = np.array([speed_fin])
visc_pred = m * np.exp(-t * (inputspeed)) + b
print("Predicted viscosity is {} cp".format(round(visc_pred[0],2)))

